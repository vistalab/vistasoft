function res = viewHelpParameter(paramIn)
% Maps the paramIn to the help file, displaying an explanation of what each
% viewGet/Set parameter should do.
% This function should never
% be called directly, but is instead wrapped by viewMapParameterField.
%
%    res = viewHelpParameter(paramIn);
%
% Add help functionality for viewGet/Set.
%
% By using this function, we can get help from the program itself when
% trying to call a certain field. This embeds knowledge of what each field
% does into the program, rather than into people's heads.
%
% res returns a multi-line string that, when printed, will display across
% multiple lines, similar to the multi-line comments previously stored in
% the Matlab code.
%
% Examples:
%   viewHelpParameter('name')
%   viewHelpParameter('curdt')

global DictViewHelp;

if isempty(DictViewHelp)
    DictViewHelp = containers.Map;
    
    DictViewHelp('homedir') = ['Return full path to directory.' char(10) ...
        'homedir = viewGet(vw, ''Home Directory'');'];
    DictViewHelp('sessionname') = ['Retrun name of session, such as ''BW090616-8Bars-14deg''.' char(10) ...
        'sessionName = viewGet(vw, ''session name'');'];
    DictViewHelp('subject') = ['Return name of subject, such as ''Wandell''' char(10) ...
        'subject = viewGet(vw, ''subject'')'];
    DictViewHelp('name') = ['Return name of view, such as ''INPLANE{1}''' char(10) ...
        'name = viewGet(vw, ''view name'');'];
    DictViewHelp('annotation') = ['Return description of currently selected scan (string, such as' char(10) ...
        '''14 Deg 8 Bars with blanks'')' char(10) ...
        'annotation = viewGet(vw, ''annotation'');'];
    DictViewHelp('annotations') = ['Return a cell array with descriptions of each scan in current' char(10) ...
        'dataType' char(10) ...
        'annotations = viewGet(vw, ''annotations'');'];
    DictViewHelp('viewtype') = ['Return the view type (''Gray'', ''Volume'', ''Inplane'', ''Flat'', etc) ' char(10) ...
        'viewType = viewGet(vw, ''View Type'');'];
    DictViewHelp('subdir') = ['Return the sub directory name (not the full path) with data for' char(10) ...
        'current view ' char(10) ...
        'subdir = viewGet(vw, ''sub directory'');'];
    DictViewHelp('curscan') = ['Return the currently selected scan number' char(10) ...
        'curscan = viewget(vw, ''Current Scan'');'];
    DictViewHelp('curslice') = ['Return the current slice number. This is the actual slice number' char(10) ...
        'if we are in the Inplane view. It is the plane number (sag, cor,' char(10) ...
        'or axi) of the currently selected plane if we are in the Volume' char(10) ...
        'view. And it is 1 or 2 in the Flat view (for left or right).' char(10) ...
        'curslice = viewGet(vw, ''Current Slice'');'];
    DictViewHelp('nscans') = ['Return the number of scans in the currently selected dataTYPE' char(10) ...
        'nscans = viewGet(vw, ''Number of Scans'');'];
    DictViewHelp('nslices') = ['Return the number of slices in the current view struct' char(10) ...
        'nslices = viewGet(vw, ''Number of Slices'');'];
    DictViewHelp('montageslices') = ['Return the current subset of slices that are visible in the GUI.' char(10) ...
        'montageSlices = viewGet(vw, ''Montage Slices'');' char(10) ...
        '' char(10) ...
        'only for some view types: inplane montage, flat level' char(10) ...
        'Well, this seems not to be true since it returns a value in the' char(10) ...
        'Volume view.'];
    DictViewHelp('dtname') = ['Return the name of the currently selected dataTYPE' char(10) ...
        'dtName = viewGet(vw, ''Data TYPE Name'');' char(10) ...
        '' char(10) ...
        'ras 06/07: note that I ''stole'' the ''datatype'' alias from' char(10) ...
        'the dtnumber property: I think the name is more relevant'];
    DictViewHelp('curdt') = ['Return the number of the currently selected dataTYPE' char(10) ...
        'dtNum = viewGet(vw, ''Current Data TYPE'');'];
    DictViewHelp('dtstruct') = ['Return the currently selected dataTYPE struct' char(10) ...
        'dtStruct = viewGet(vw, ''DT struct'');       '];
    DictViewHelp('coherence') = ['Coherence for all voxels, all scans in current dataTYPE        ' char(10) ...
        'co = viewGet(vw, ''Coherence'');        '];
    DictViewHelp('scanco') = ['Coherence for single scan' char(10) ...
        'scanco = viewGet(vw, ''scan coherence'', 1);        '];
    DictViewHelp('phase') = ['Phase for all voxels, all scans in current dataTYPE    ' char(10) ...
        'ph = viewGet(vw, ''Phase'');'];
    DictViewHelp('scanph') = ['Phase values for single scan' char(10) ...
        'viewGet(vw,''Scan Phase'',1);'];
    DictViewHelp('amplitude') = ['Amplitude for all voxels, all scans in current dataTYPE    ' char(10) ...
        'amp = viewGet(vw, ''Amplitude'');'];
    DictViewHelp('scanamp') = ['Amplitude values for single scan (selected scan or specified' char(10) ...
        'scan).' char(10) ...
        'scan = 1; scanAmp = viewGet(vw,''scan Amp'', scan);' char(10) ...
        'scanAmp = viewGet(vw,''scan Amp'');'];
    DictViewHelp('refph') = ['Return the reference phase used for computing phase-referred' char(10) ...
        'coherence. Should be [0 2*pi]?' char(10) ...
        'refph = viewGet(vw,''reference phase'');'];
    DictViewHelp('ampmap') = ['Return the colormap currently used to display amplutitude data.' char(10) ...
        'Should be 3 x numColors.' char(10) ...
        'ampMap = viewGet(vw, ''amplitude color map'');'];
    DictViewHelp('coherencemap') = ['Return the colormap currently used to display coherence data.' char(10) ...
        'Should be 3 x numColors.' char(10) ...
        'cohMap = viewGet(vw, ''coherence color map'');'];
    DictViewHelp('correlationmap') = ['Return the colormap currently used to display correlation data.' char(10) ...
        'Should be 3 x numColors. ' char(10) ...
        'corMap = viewGet(vw, ''correlation color map'');' char(10) ...
        '' char(10) ...
        '[Q: what is a correlation map and how does it differ from' char(10) ...
        'coherence map?]'];
    DictViewHelp('cothresh') = ['Return the coherence threshold. Should be in [0 1].' char(10) ...
        'cothresh = viewGet(vw, ''Coherence Threshold'');'];
    DictViewHelp('phwin') = ['Return  phWindow values from phWindow sliders (non-hidden views)' char(10) ...
        'or from the view.settings.phWin field (hidden views). If can''t' char(10) ...
        'find either, defaults to [0 2*pi].' char(10) ...
        'phwin = viewGet(vw, ''phase window'');'];
    DictViewHelp('twparams') = ['Return travelling wave parameters.' char(10) ...
        'twparams = viewGet(vw, ''Travelling Wave Parameters'');        '];
    DictViewHelp('cmap') = ['Return the colormap for whichever data view (co, ph, amp, map) is' char(10) ...
        'currently selected.' char(10) ...
        'cmap = viewGet(vw, ''color map'');'];
    DictViewHelp('cmapcolor') = ['Return color portion of current color overlay map.' char(10) ...
        'cmapColor = viewGet(vw, ''cmap color'');'];
    DictViewHelp('cmapgrayscale') = ['Return grayscale portion of current color overlay map' char(10) ...
        'cmapGray = viewGet(vw, ''cmap grayscale'');'];
    DictViewHelp('map') = ['Return the parameter map for the current data type. Map is cell' char(10) ...
        'array 1 x nscans.' char(10) ...
        'map = viewGet(vw, ''map'');'];
    DictViewHelp('mapwin') = ['Return mapWindow values from mapWindow sliders (non-hidden views)' char(10) ...
        'or from the view.settings.mapWin field (hidden views).        ' char(10) ...
        'mapWin = viewGet(vw, ''Map Window'');'];
    DictViewHelp('mapname') = ['Return the name of the current paramter map (string), e.g.,' char(10) ...
        '''eccentricty''. ' char(10) ...
        'mapName = viewGet(vw, ''Map Name'');'];
    DictViewHelp('mapunits') = ['Return the map units for the current paramter map (string), e.g.,' char(10) ...
        '''degrees''. The map units are for display only; they are not used' char(10) ...
        'for calculations.' char(10) ...
        'mapUnits = viewGet(vw, ''Map Units'');'];
    DictViewHelp('mapclip') = ['Return map clip values. These are the clip values for the' char(10) ...
        'colorbar. They are not the clip values in the slider (which are' char(10) ...
        'called ''mapwin''). Values outside of mapclip are colored the same' char(10) ...
        'as the minimum or maximum value according to the color lookup' char(10) ...
        'table. Values outside of mapwin are not shown at all.' char(10) ...
        'mapClip = viewGet(vw, ''Map Window'');'];
    DictViewHelp('scanmap') = ['Return the parameter map for the currently selected or the' char(10) ...
        'specified scan.' char(10) ...
        'scanMap = viewGet(vw, ''scan map'')' char(10) ...
        'scan = 1; scanMap = viewGet(vw, ''scan map'', scan);'];
    DictViewHelp('anatomy') = ['Return the anatomical underlay image.'];
    DictViewHelp('anatomymap') = ['Return the colormap for the anatomical underlay image.' char(10) ...
        'anataomyMap = viewGet(vw, ''Anatomy Map'');'];
    DictViewHelp('anatomynifti') = ['Return the actual nifti struct stored in anat'];
    DictViewHelp('anatclip') = ['Return anatomy clipping values from anatMin and anatMax sliders.' char(10) ...
        'anataomyClip = viewGet(vw, ''Anatomy Clip'');'];
    DictViewHelp('anatslicedim') = ['Returns the dimension of the matrix that is associated with' char(10) ...
        'slices'];
    DictViewHelp('anatslicedims') = ['Returns the dimensions of each 2D array making up each slice'];
    DictViewHelp('anatsize') = ['Load an anatomy if one does not already exist'];
    DictViewHelp('anatomycurrentslice') = ['Return the anatomical underlay image for only one slice' char(10) ...
        'anat = viewGet(vw, ''Anatomy Current Slice'', curSlice);'];
    DictViewHelp('anatsizexyz') = ['The class data store the planes in a different order from the' char(10) ...
        'vw.anat.  If you want sizes that work for the class data, call' char(10) ...
        'this size.' char(10) ...
        'anatSizeXYZ = viewGet(vw, ''Anatomy Size For Class'');'];
    DictViewHelp('brightness') = ['Return the value of the brightness slider bar for the anatomical' char(10) ...
        'underlay image.' char(10) ...
        'brightness = viewGet(vw, ''brightness'');'];
    DictViewHelp('contrast') = ['Return the value of the contrast slider bar for the anatomical' char(10) ...
        'underlay image.' char(10) ...
        'contrast = viewGet(vw, ''contrast'');'];
    DictViewHelp('mmpervox') = ['Return the size of a voxel in mm' char(10) ...
        'mmPerVox = viewGet(vw, ''mm per voxel'');'];
    DictViewHelp('mmpervolvox') = ['Return the size of a gray/volume voxel in mm. ' char(10) ...
        'If we are in the gray or volume view, this is no different from' char(10) ...
        'viewGet(vw, ''mm per vox''). If we are in a different viewType' char(10) ...
        '(inplane, flat),  we need to initialize a hidden gray view' char(10) ...
        'and then read voxel size.' char(10) ...
        'mmpervolvox = viewGet(vw, ''mm per vol vox'');        '];
    DictViewHelp('gray') = '';
        DictViewHelp('gray') = '';
        DictViewHelp('ngraylayers') = ['Return the number of gray layers in the classification file.' char(10) ...
        'Assumes a Gray or Volume view.' char(10) ...
        'nGrayLayers = viewGet(vw, ''Number Gray Layers'');'];
        DictViewHelp('gray') = '';
        DictViewHelp('gray') = '';
        DictViewHelp('scannerxform') = ['Return the transform matrix from INPLANE coordinates (x,y,z, indices) to' char(10) ...
        'scanner coordinates (in mm). Inplane dicoms are needed to get' char(10) ...
        'this information.' char(10) ...
        'The transform will yield: scannerCoords = scannerXform*ipCoords;' char(10) ...
        'scannerxform = viewGet(vw, ''Scanner transform'');' char(10) ...
        'scannerxform = viewGet(vw, ''scannerXform'', [rawFile]);'];
        DictViewHelp('b0dir') = ['Return the direction of the B0 field from a scan as a unit vector' char(10) ...
        'b0vector = viewGet(vw, ''b0 direction'');'];
        DictViewHelp('b0angle') = ['Return the direction of b0 field from a scan as an angle in degrees' char(10) ...
        'b0angle = viewGet(vw, ''b0 angle'');'];
        DictViewHelp('rois') = ['Return ROIs as struct. Includes all ROIs and all fields' char(10) ...
        'ROIs = viewGet(vw, ''ROIs'');'];
        DictViewHelp('roistruct') = ['Return selected or specified ROI as struct. ' char(10) ...
        'ROI = viewGet(vw, ''ROI struct'');' char(10) ...
        'ROI = viewGet(vw, ''ROI struct'', 1);'];
        DictViewHelp('roicoords') = ['Return the coordinates of the currently selected or the specified' char(10) ...
        'ROI' char(10) ...
        'roiCoords = viewGet(vw, ''ROI coords'');' char(10) ...
        'ROI = 1; roiCoords = viewGet(vw, ''ROI coords'', ROI);'];
        DictViewHelp('roiindices') = ['Return the indices of all voxels in the currently selected or the' char(10) ...
        'specified ROI. Only implemented for gray / vol view. Could be' char(10) ...
        'implemented for other views. ' char(10) ...
        'roiIndices = viewGet(vw, ''ROI indices'');' char(10) ...
        'ROI = 1; roiIndices = viewGet(vw, ''ROI indices'', ROI);    '];
        DictViewHelp('gray') = '';
        DictViewHelp('gray') = '';
        DictViewHelp('roivertinds') = ['Return mesh indices for each voxel in a gray view ROI' char(10) ...
        'roiVertexIndices = ...' char(10) ...
        'viewGet(vw, ''ROI Vertex Indices'', [ROI],[mrmPrefs]);        '];
        DictViewHelp('roivertinds') = '';
        DictViewHelp('roivertinds') = '';
        DictViewHelp('roivertinds') = '';
        DictViewHelp('roivertinds') = '';
        DictViewHelp('roiname') = ['Return the name of the currently selected or the requested ROI.' char(10) ...
        'roiName = viewGet(vw, ''ROI name'');' char(10) ...
        'roi = 1; roiName = viewGet(vw, ''ROI name'', roi);'];
        DictViewHelp('roimodified') = ['Return the modification date of the currently selected or the' char(10) ...
        'requested ROI.' char(10) ...
        'roiName = viewGet(vw, ''ROI modified'');' char(10) ...
        'roi = 1; roiName = viewGet(vw, ''ROI modified'', roi);'];
        DictViewHelp('allroinames') = ['Return a cell array of the names of all currently loaded ROIs.' char(10) ...
        'roiNames = viewGet(vw, ''All ROI names'');'];
        DictViewHelp('nrois') = ['Return the number of currently loaded ROIs.' char(10) ...
        'nrois = viewGet(vw, ''n ROIs'');'];
        DictViewHelp('selectedroi') = ['Return the number of the currently selected ROI.' char(10) ...
        'selectedROI = viewGet(vw, ''Selected ROI'');'];
        DictViewHelp('filledperimeter') = ['Return the value of the field "filledPerimeter". Not sure exactly' char(10) ...
        'how this works, but we think this field is 1 if ROIs are drawn as' char(10) ...
        'filled perimeter and 0 if not, but perhaps it can take other' char(10) ...
        'values?' char(10) ...
        'filledPerimeter = viewGet(vw, ''filled perimeter'');'];
        DictViewHelp('selroicolor') = ['Return the color of the currently selected or the requested ROI.' char(10) ...
        'This can be a Matlab character for a color (''c'', ''w'', ''b'', etc)' char(10) ...
        'or an RGB triplet.' char(10) ...
        'selcol = viewGet(vw, ''Selected ROI color'');' char(10) ...
        'roi = 1; selcol = viewGet(vw, ''Selected ROI color'', roi);'];
        DictViewHelp('prevcoords') = ['Return the coords of the previous ROI state. ' char(10) ...
        'But what does this mean? How does it work?' char(10) ...
        'prevCoords = viewGet(vw, ''previous coords'');'];
        DictViewHelp('roistodisplay') = ['Return the number of each ROI that has been selected to be' char(10) ...
        'displayed. This can be one ROI only (the currently selected ROI),' char(10) ...
        'all ROIs, or a subset. A vector of index values is returned.' char(10) ...
        'See roiSetOptions for an explanation of this format.' char(10) ...
        'roisToDisplay = viewGet(vw, ''ROIs To Display'');'];
        DictViewHelp('roidrawmethod') = ['Return the method for drawing ROIs, such as ''perimeter'',' char(10) ...
        '''filledPerimeter''.' char(10) ...
        'ROIdrawMethod = viewGet(vw, ''ROI Draw Method'');'];
        DictViewHelp('showrois') = ['Return the boolean to indicate whether ROIs are drawn or hidden.' char(10) ...
        'Applies to views such as Volume, Gray, Inplane, Flat, and also' char(10) ...
        'meshes. ' char(10) ...
        '[OK, not quite a Boolean because I see that values can be -2, for' char(10) ...
        'example. What are all the possible values and what do they mean?] ' char(10) ...
        'showROIs = viewGet(vw, ''Show ROIs'');        '];
        DictViewHelp('hidevolumerois') = ['Return the Boolean ''hideVolumeROIs''. If true, then ROIs in' char(10) ...
        'Gray/Volume view are not drawn (but ROIs on meshes may still be' char(10) ...
        'drawn.) The reason we might want to do this is because redrawing' char(10) ...
        'ROIs in the Volume view can be very slow. This field works' char(10) ...
        'indepently from the field ''showROIs'', which controls whether ROIs' char(10) ...
        'are displayed in any view and on meshes. So if showROIs is true' char(10) ...
        'and hideVolumeROIs is false, ROIs will show on a mesh, an inplane' char(10) ...
        'view, or a flat view, but not a Gray/Volume view. If showROIs is' char(10) ...
        'false, no ROIs will be shown anywhere.' char(10) ...
        'hidevolumerois = viewGet(vw, ''Hide Volume ROIs'');'];
        DictViewHelp('maskrois') = ['Return the Boolean ''maskROIs''. If maskROIs is true, then maps' char(10) ...
        'that are displayed on meshes are masked out everywhere outside of' char(10) ...
        'the currently displayed ROIs. The currently displayed ROIs might' char(10) ...
        'be just the currently selected ROI, all the ROIs, or a subset of' char(10) ...
        'ROIs. (See the case ''roisToDisplay''.)' char(10) ...
        'maskROIs = viewGet(vw, ''mask ROIs'');'];
        DictViewHelp('tseriesdir') = ['Return tSeries directory for a view; make it if it does not' char(10) ...
        'exist.' char(10) ...
        'makeIt = 0; tDir = viewGet(vw,''tSeriesDir'',makeIt);' char(10) ...
        'makeIt = 1; tDir = viewGet(vw,''tSeriesDir'',makeIt);' char(10) ...
        'tDir = viewGet(vw,''tSeriesDir'')'];
        DictViewHelp('datasize') = ['Return the size of the data arrays, i.e., size of co for' char(10) ...
        'a single scan.' char(10) ...
        'dataSize = viewGet(vw, ''Data Size'');' char(10) ...
        'scan = 1; dataSize = viewGet(vw, ''Data Size'', scan);'];
        DictViewHelp('dim') = ['Return the dimension of data in current slice or specificed slice' char(10) ...
        'dim = viewGet(vw, ''Slice Dimension'')' char(10) ...
        'scan = 1; dim = viewGet(vw, ''Slice Dimension'', scan)        '];
        DictViewHelp('functionalslicedim') = ['Return the dimension of functional data in current slice or' char(10) ...
        'specificed slice' char(10) ...
        'dim = viewGet(vw, ''Slice Dimension'')' char(10) ...
        'scan = 1; dim = viewGet(vw, ''Slice Dimension'', scan)'];
        DictViewHelp('tseries') = ['Return the time series of all data currently loaded into the view' char(10) ...
        'struct.' char(10) ...
        'tseries = viewGet(vw, ''time series'');'];
        DictViewHelp('tseriesslice') = ['Return the time series for the currently selected slice if it is' char(10) ...
        'loaded into the view struct (return blank otherwise).' char(10) ...
        'tseries = viewGet(vw, ''Time Series Slice'');'];
        DictViewHelp('tseriesscan') = ['Return the time series for the current scan (if it is loaded into' char(10) ...
        'the view struct; return blank if it is not loaded).' char(10) ...
        'tseriesScan = viewGet(vw, ''time series scan'');'];
        DictViewHelp('tr') = ['Return the scan TR in seconds' char(10) ...
        'tr = viewGet(vw,''tr'')' char(10) ...
        'scan = 1; tr = viewGet(vw,''tr'',scan)'];
        DictViewHelp('nframes') = ['Return the number of time frames in the current or specified' char(10) ...
        'scan.' char(10) ...
        'nframes = viewGet(vw,''nFrames'');' char(10) ...
        'scan = 1; nframes = viewGet(vw,''nFrames'',scan);'];
        DictViewHelp('ncycles') = ['Return the number of cycles in the current or specified scan' char(10) ...
        '(assuming scan is set up for coranal). ' char(10) ...
        'nycles = viewGet(vw,''ncycles'')' char(10) ...
        'scan = 1; nycles = viewGet(vw,''ncycles'', scan)'];
        DictViewHelp('framestouse') = ['Return a vector of time frames in the current or specified' char(10) ...
        'scan to be used for coranal (block) analyses' char(10) ...
        'frames = viewGet(vw,''frames to use'');' char(10) ...
        'scan = 1; frames = viewGet(vw,''frames to use'',scan);'];
        DictViewHelp('rmfile') = ['Return the path to the currently loaded retinotopy model.' char(10) ...
        'rmFile = viewGet(vw, ''retinotopy model file'');'];
        DictViewHelp('rmmodel') = ['Return the currently loaded retinotopy model struct.' char(10) ...
        'rm = viewGet(vw, ''retinotopy model'');'];
        DictViewHelp('rmcurrent') = ['Return the currently selected retinotopy model struct. Note that' char(10) ...
        'there may be multiple models loaded.' char(10) ...
        'rm = viewGet(vw, ''rm current model'');'];
        DictViewHelp('rmmodelnames') = ['Return the description of currently loaded retinotopy models.' char(10) ...
        'models = viewGet(vw, ''rm model names'');' char(10) ...
        'models = viewGet(vw, ''retinotopy model names'');'];
        DictViewHelp('rmparams') = ['Return the retinotopy model parameters.' char(10) ...
        'params = viewGet(vw, ''Retinotopy Parameters'');'];
        DictViewHelp('rmstimparams') = ['Return the retinotopy model stimulus parameters. This is a subset' char(10) ...
        'of the retinopy model parameters.' char(10) ...
        'stimParams = viewGet(vw, ''RM Stimulus Parameters'');'];
        DictViewHelp('rmmodelnum') = ['Return the retinotopy model number that is currently selected.' char(10) ...
        '(There may be more than one model loaded.)' char(10) ...
        'modelNum = viewGet(vw, ''Retinotopy Model Number'');'];
        DictViewHelp('rmhrf') = ['Return the hrf struct for the current retinopy model. This struct' char(10) ...
        'contains a descriptor (such as ''two gammas (SPM style)'') and the' char(10) ...
        'parameters associated with this function.' char(10) ...
        'rmhrf = viewGet(vw, ''Retinotopy model HRF'');'];
        DictViewHelp('one gamma (boynton style)') = '';
        DictViewHelp('two gammas (spm style)') = '';
        DictViewHelp('impulse') = '';
        DictViewHelp('impulse') = '';
        DictViewHelp('allmeshes') = ['Return the structs for all currently loaded meshes.' char(10) ...
        'allmeshes = viewGet(vw, ''all meshes'');'];
        DictViewHelp('allmeshids') = ['Return the ID list for all meshes. IDs are numbers generated by' char(10) ...
        'mrMesh that are associated with each new mesh session. They are' char(10) ...
        'typically 4 digit numbers starting at 1001. (why??)' char(10) ...
        'idList = viewGet(vw,''All Window IDs'');'];
        DictViewHelp('mesh') = ['Return the mesh structure for the selected or the requested mesh.' char(10) ...
        'If the mesh number is specificied, it indexes the cell array of' char(10) ...
        'meshes currently attached to the view structure. The mesh number' char(10) ...
        'bears no relation to the mesh ID number, which is generated by' char(10) ...
        'the mesh server.' char(10) ...
        'msh = viewGet(vw, ''mesh'');' char(10) ...
        'meshnum = 1; msh = viewGet(vw, ''mesh'', meshnum);'];
        DictViewHelp('currentmesh') = ['Return the mesh structure for the selected mesh. This is' char(10) ...
        'redundant with the case ''mesh''.' char(10) ...
        'msh = viewGet(vw, ''Current Mesh'');'];
        DictViewHelp('meshn') = ['Return the number of the currently selected mesh (index into the' char(10) ...
        'cell array of meshes)' char(10) ...
        'msh = viewGet(vw, ''current mesh number'');'];
        DictViewHelp('meshdata') = ['I think this is supposed to return the data displayed on the' char(10) ...
        'current mesh, but I have just tried it and it doesn''t seem to' char(10) ...
        'work. So what does it do?' char(10) ...
        'meshData = viewGet(vw, ''current mesh data'');'];
        DictViewHelp('nmesh') = ['Return the number of meshes currently attached to the view' char(10) ...
        'struct.' char(10) ...
        'nmesh = viewGet(vw, ''Number of Meshes'');'];
        DictViewHelp('meshnames') = ['Return the name of all meshes currently attached to the view' char(10) ...
        'struct.' char(10) ...
        'meshNames = viewGet(vw, ''mesh names'');'];
        DictViewHelp('meshdir') = ['Return the directory in which the currently selected mesh' char(10) ...
        'resides. Default to anat dir if not found.' char(10) ...
        'meshDir = viewGet(vw, ''mesh directory'');        '];
        DictViewHelp('nodes') = ['Return the array of nodes. Only gray views have nodes. See help' char(10) ...
        'for mrManDist.m for a description of the node structure. In' char(10) ...
        'brief, nodes are 8 x nvoxels. The first 3 rows correspond to the' char(10) ...
        'voxel location and the next 5 correspond to gray graph-related' char(10) ...
        'data.' char(10) ...
        'nodes = viewGet(vw, ''nodes'');'];
        DictViewHelp('xyznodes') = ['Return the xyz coordinates of the gray voxels as found in nodes' char(10) ...
        'array. Assumes a Gray view. See case ''nodes'' and help for' char(10) ...
        'mrManDist for more information.' char(10) ...
        '' char(10) ...
        'Must call this sagittal, axial coronal or whatever the mapping is' char(10) ...
        'ras, 06/07 -- I believe it''s [cor axi sag]. coords is [axi cor sag].' char(10) ...
        '' char(10) ...
        'xyzNodes = viewGet(vw, ''xyz nodes'');'];
        DictViewHelp('nodegraylevel') = ['Return the gray level of each voxel as determined by the nodes' char(10) ...
        'array. Assumes a Gray view. See case ''nodes'' and help for' char(10) ...
        'mrManDist for more information.' char(10) ...
        'nodeGrayLevel = viewGet(vw, ''gray level'');'];
        DictViewHelp('nnodes') = ['Return the number of nodes. Assumes a Gray view. See case ''nodes''' char(10) ...
        'and help for mrManDist for more information. ' char(10) ...
        'nNodes = viewGet(vw, ''number of nodes'');'];
        DictViewHelp('edges') = ['Return the edge structure of the gray graph. Assumes a Gray view.' char(10) ...
        'See help for mrManDist for more information. ' char(10) ...
        'edges = viewGet(vw, ''edges'');'];
        DictViewHelp('nedges') = ['Return the number of edges in the gray graph. Assumes a Gray' char(10) ...
        'view. See case ''edges'' and help for mrManDist for more' char(10) ...
        'information.' char(10) ...
        'nEdges = viewGet(vw, ''number of edges'');      '];
        DictViewHelp('allleftnodes') = ['Return the subset of nodes in the Gray graph that are in the left' char(10) ...
        'hemisphere. See mrgGrowGray and mrManDist.' char(10) ...
        'allLeftNodes = viewGet(vw, ''all left nodes'');'];
        DictViewHelp('allleftedges') = ['Return the subset of edges in the Gray graph that are in the left' char(10) ...
        'hemisphere. See mrgGrowGray and mrManDist.' char(10) ...
        'allLeftEdges = viewGet(vw, ''all left edges'');'];
        DictViewHelp('allrightnodes') = ['Return the subset of nodes in the Gray graph that are in the' char(10) ...
        'right hemisphere. See mrgGrowGray and mrManDist.' char(10) ...
        'allRightNodes = viewGet(vw, ''all right nodes'');'];
        DictViewHelp('allrightedges') = ['Return the subset of edges in the Gray graph that are in the' char(10) ...
        'right hemisphere. See mrgGrowGray and mrManDist.' char(10) ...
        'allRightEdges = viewGet(vw, ''all right edges'');'];
        DictViewHelp('allnodes') = ['Return all nodes from Gray graph by taking union of allLeftNodes' char(10) ...
        'and allRightNodes. ' char(10) ...
        '' char(10) ...
        'This is NOT necessarily the same as simply returning ''vw.nodes''.' char(10) ...
        'When we install a segmentation, we can either keep all the nodes' char(10) ...
        'in the gray graph, or only those that fall within the functional' char(10) ...
        'field of view (to save space). When we do the latter, the fields' char(10) ...
        'vw.coords, vw.nodes, and vw.edges contain only the coords, nodes,' char(10) ...
        'and eges within the functional field of view. However the fields' char(10) ...
        'vw.allLeftNodes, vw.allLeftEdges, vw.allRightNodes, and' char(10) ...
        'vw.allRightEdges contain the edges and nodes for the entire' char(10) ...
        'hemisphere' char(10) ...
        '' char(10) ...
        'Example: nodes = viewGet(vw, ''all nodes'');'];
        DictViewHelp('alledges') = ['Return all edges from Gray graph by taking union of allLeftEdges' char(10) ...
        'and allRightEdges. See ''allnodes'' for explanation.' char(10) ...
        '' char(10) ...
        'Example: edges = viewGet(vw, ''all edges'');'];
        DictViewHelp('coords') = ['Return all the coordinates in the current view. If in Flat view,' char(10) ...
        'return the coordinates for a particular slice (slice specified in' char(10) ...
        'varargin{1}). If in Inplane view, slice specification is' char(10) ...
        'optional. If in Gray or Volume view, slice specification is' char(10) ...
        'ignored.' char(10) ...
        '<gray, volume or inplane> ' char(10) ...
        'coords = viewGet(vw, ''coords'');' char(10) ...
        '<flat or inplane>' char(10) ...
        'slice  = viewGet(vw, ''current slice''); ' char(10) ...
        'coords = viewGet(vw,''coords'', slice);'];
        DictViewHelp('allcoords') = ['Return all coords from Gray graph, including those that are not' char(10) ...
        'included in the functional field of view. See ''allnodes'' for' char(10) ...
        'explanation. If session was initialized with the option ' char(10) ...
        '''keepAllNodes'' == true, then this call will be identical to' char(10) ...
        'viewGet(vw.coords).' char(10) ...
        '' char(10) ...
        'Example: coords = viewGet(vw, ''all coords'');'];
        DictViewHelp('coordsfilename') = ['Return the path to the file in which coordinates are stored.' char(10) ...
        'Assumes that a gray view has been created (though current view' char(10) ...
        'can be any type).' char(10) ...
        'coordsFileName = viewGet(vw, ''coords file name'');'];
        DictViewHelp('ncoords') = ['Return the number of coordinates in the current view. See case' char(10) ...
        '''coords''.' char(10) ...
        'nCoords = viewGet(vw, ''number of coords'');'];
        DictViewHelp('classfilename') = ['Return the path to either the left or the right gray/white' char(10) ...
        'classification file. ' char(10) ...
        'fname = viewGet(vw, ''class file name'', ''left'');' char(10) ...
        'fname = viewGet(vw, ''class file name'', ''right'');'];
        DictViewHelp('classdata') = ['classFileRight = viewGet(vw,''class data'',''right'');'];
        DictViewHelp('graymatterfilename') = ['grayFile = viewGet(vw,''Gray matter filename'',''right'');'];
        DictViewHelp('datavalindex') = '';
        DictViewHelp('analysisdomain') = '';
        DictViewHelp('graycoords') = ['''graycoords'' is also an alias for coords in volume/gray views:'];
        DictViewHelp('leftpath') = '';
        DictViewHelp('rightpath') = '';
        DictViewHelp('fliplr') = '';
        DictViewHelp('imagerotation') = '';
        DictViewHelp('hemifromcoords') = '';
        DictViewHelp('roihemi') = '';
        DictViewHelp('ishidden') = '';
        DictViewHelp('ui') = '';
        DictViewHelp('fignum') = '';
        DictViewHelp('windowhandle') = '';
        DictViewHelp('displaymode') = '';
        DictViewHelp('anatomymode') = '';
        DictViewHelp('coherencemode') = '';
        DictViewHelp('correlationmode') = '';
        DictViewHelp('phasemode') = '';
        DictViewHelp('amplitudemode') = '';
        DictViewHelp('projectedamplitudemode') = '';
        DictViewHelp('mapmode') = '';
        DictViewHelp('zoom') = '';
        DictViewHelp('crosshairs') = '';
        DictViewHelp('locs') = '';
        DictViewHelp('phasecma') = ['This returns only the color part of the map'];
        DictViewHelp('cmapcurrent') = '';
        DictViewHelp('cmapcurmodeclip') = '';
        DictViewHelp('cmapcurnumgrays') = '';
        DictViewHelp('cmapcurnumcolors') = '';
        DictViewHelp('flipud') = ['Return the boolean indicating whether to invert the image u/d in' char(10) ...
        'the graphical user interface.  It is sometimes convenient to do' char(10) ...
        'this in the Inplane view if the top of the slice corresponds to' char(10) ...
        'the bottom of the brain.' char(10) ...
        'Example: ' char(10) ...
        'flipud = viewGet(vw, ''flip updown'');'];
        DictViewHelp('ampclip') = '';
        DictViewHelp('addmesh') = '';
        DictViewHelp('anatinitialize') = '';
        DictViewHelp('cbarrange') = '';
        DictViewHelp('colorbarhandle') = '';
        DictViewHelp('deletemesh') = '';
        DictViewHelp('initdisplaymodes') = '';
        DictViewHelp('leftclassfile') = '';
        DictViewHelp('leftgrayfile') = '';
        DictViewHelp('mainaxishandle') = '';
        DictViewHelp('refreshfn') = '';
        DictViewHelp('rightclassfile') = '';
        DictViewHelp('rightgrayfile') = '';
        DictViewHelp('roi') = '';
        DictViewHelp('roioptions') = '';
        DictViewHelp('spatialgrid') = '';
        DictViewHelp('spatialgrad') = '';
        DictViewHelp('uiimage') = '';
        DictViewHelp('size') = '';
    
end %if

if DictViewHelp.isKey(paramIn)
    res = DictViewHelp(paramIn);
else
    error('Dict:ViewHelpError', 'The input %s does not appear to be in the dictionary', paramIn);
end %if

return